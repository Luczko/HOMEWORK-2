let colors = [1, 2, 3, 4];
let figures = [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2];

let deck = [];
for (let i = 0; i < colors.length; i++) {
  for (let j = 0; j < figures.length; j++) {
    let card = {
      figure: figures[j],
      color: colors[i]
    };
    deck.push(card);
  }
}

// console.log(deck);
// console.log(deck[2]);

let randomCards = [];
for (let i = 0; i < 5; i++) {
  let newCard = Math.floor(Math.random() * deck.length);
  randomCards.push(deck[newCard]);
  deck.splice(newCard, 1);
}

// cS - skrót od cardsSorted
const cS = randomCards.sort(function(a, b) {
  return a.figure - b.figure;
});

// DO SPRAWDZANIA POPRAWNOŚCI ZMIENIĆ NA cS
// const bS = [{
//     figure: 6,
//     color: 1
//   },{
//     figure: 3,
//     color: 1
//   },{
//     figure: 4,
//     color: 1
//   },{
//     figure: 5,
//     color: 1
//   },
//   {
//     figure: 14,
//     color: 1
//   }]

const cardsColored = cS.map(e => {
  switch (e.color) {
    case 1:
        return e = {
            figure: e.figure,
            color: "Hearts"
        };
    case 2:
        return e = {
            figure: e.figure,
            color: "Clubs"
        };
    case 3:
        return e = {
            figure: e.figure,
            color: "Diamond"
        };
    case 4:
        return e = {
            figure: e.figure,
            color: "Spades"
        };
  }
});
const cardsNamed = cardsColored.map(e => {
  switch (e.figure) {
    case 2:
        return e = {
            figure: "Two",
            color: e.color
        };
    case 3:
        return e = {
            figure: "Three",
            color: e.color
        };
    case 4:
      return e = {
        figure: "Four",
        color: e.color
    };
    case 5:
      return e = {
        figure: "Five",
        color: e.color
    };
    case 6:
      return e = {
        figure: "Six",
        color: e.color
    };
    case 7:
      return e = {
        figure: "Seven",
        color: e.color
    };
    case 8:
      return e = {
        figure: "Eight",
        color: e.color
    };
    case 9:
      return e = {
        figure: "Nine",
        color: e.color
    };
    case 10:
      return e = {
        figure: "Ten",
        color: e.color
    };
    case 11:
      return e = {
        figure: "Jack",
        color: e.color
    };
    case 12:
      return e = {
        figure: "Queen",
        color: e.color
    };
    case 13:
      return e = {
        figure: "King",
        color: e.color
    };
    case 14:
      return e = {
        figure: "Ace",
        color: e.color
    };
  }
});

// console.log(cS);
// console.log(cardsNamed);
console.log(cardsNamed[0]);
console.log(cardsNamed[1]);
console.log(cardsNamed[2]);
console.log(cardsNamed[3]);
console.log(cardsNamed[4]);
// console.log(cS[0]);
// console.log(cS[1]);
// console.log(cS[2]);
// console.log(cS[3]);
// console.log(cS[4]);


if (
    ((cS[0].figure == 10) && (cS[1].figure == 11) && (cS[2].figure == 12) && (cS[3].figure == 13) && (cS[4].figure == 14)) &&
    ((cS[0].color == cS[1].color) && (cS[1].color == cS[2].color) && (cS[2].color === cS[3].color))
  ) {
    console.log(`Royal flush`);
  }  
// Royal flush

else if (
    ((cS[0].figure == 2) && (cS[1].figure == 3) && (cS[2].figure == 4) && (cS[3].figure == 5) && (cS[4].figure == 14)) &&
    ((cS[0].color == cS[1].color) && (cS[1].color == cS[2].color) && (cS[2].color === cS[3].color))
  ) {
    console.log(`Straight flush`);
  }
else if (
    ((cS[0].figure == (cS[1].figure-1)) && (cS[1].figure == (cS[2].figure-1)) && (cS[2].figure == (cS[3].figure-1)) && (cS[3].figure == (cS[4].figure-1))) &&
    ((cS[0].color == cS[1].color) && (cS[1].color == cS[2].color) && (cS[2].color === cS[3].color))
  ) {
    console.log(`Straight flush`);
  }  
// Straight flush

else if (
    ((cS[0].figure == 2) && (cS[1].figure == 3) && (cS[2].figure == 4) && (cS[3].figure == 5) && (cS[4].figure == 14))
  ) {
    console.log(`Straight`);
  }
else if (
    ((cS[0].figure == (cS[1].figure-1)) && (cS[1].figure == (cS[2].figure-1)) && (cS[2].figure == (cS[3].figure-1)) && (cS[3].figure == (cS[4].figure-1)))
  ) {
    console.log(`Straight`);
  }  
// Straight

else if (
  ((cS[0].figure == cS[1].figure) && (cS[1].figure == cS[2].figure) && (cS[2].figure === cS[3].figure)) ||
  ((cS[1].figure == cS[2].figure) && (cS[2].figure == cS[3].figure) && (cS[3].figure === cS[4].figure))
) {
  console.log(`Four of a kind of ${cardsNamed[1].figure}s`);
}  
// Four of a Kind

else if (
  ((cS[0].figure == cS[1].figure) && (cS[1].figure == cS[2].figure)) &&
  (cS[3].figure == cS[4].figure))
   {
  console.log(`Full house ${cardsNamed[0].figure}s on ${cardsNamed[4].figure}s`);
} 
else if (
    ((cS[4].figure == cS[3].figure) && (cS[3].figure == cS[2].figure)) &&
    (cS[0].figure == cS[1].figure))
     {
    console.log(`Full house ${cardsNamed[4].figure}s on ${cardsNamed[0].figure}s`);
} 
// Full house

else if (
    ((cS[0].figure === cS[1].figure) && (cS[1].figure === cS[2].figure)) ||
    ((cS[2].figure === cS[3].figure) && (cS[3].figure === cS[4].figure)) ||
    ((cS[1].figure === cS[2].figure) && (cS[2].figure === cS[3].figure)))
     {
    console.log(`Three of a kind of ${cardsNamed[2].figure}s`);
  }
// Three of a kind

else if (
    ((cS[0].figure == cS[1].figure) && (cS[2].figure == cS[3].figure)) ||
    ((cS[1].figure == cS[2].figure) && (cS[3].figure == cS[4].figure)) ||
    ((cS[0].figure == cS[1].figure) && (cS[3].figure == cS[4].figure)))
     {
    console.log(`Two pairs of ${cardsNamed[1].figure}s and ${cardsNamed[3].figure}s`);
  }
// Two Pairs

else if (
    ((cS[0].figure == cS[1].figure) || (cS[1].figure == cS[2].figure)))
     {
    console.log(`One pair of ${cardsNamed[1].figure}s`);
  }
else if (
    ((cS[2].figure == cS[3].figure) || (cS[3].figure == cS[4].figure)))
     {
    console.log(`One pair of ${cardsNamed[3].figure}s`);
  }
// One Pair

else if (
    ((cS[0].color == cS[1].color) && (cS[1].color == cS[2].color) && (cS[2].color === cS[3].color))
  ) {
    console.log(`Flush`);
  }  
// Flush

else {
    console.log(`Highest card - ${cardsNamed[4].figure} of ${cardsNamed[4].color}`);
  }  
// Highest card
